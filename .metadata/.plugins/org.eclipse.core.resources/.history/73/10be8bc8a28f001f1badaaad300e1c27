package com.hcmus.admin.socket;

import java.net.URI;
import java.util.concurrent.TimeUnit;

import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

public class ServerClient extends WebSocketClient {
	private static final int RECONNECT_INTERVAL_SECONDS = 10; // Time between reconnection attempts
	
	public ServerClient(URI serverUri) {
        super(serverUri);
    }
	

    @Override
    public void onOpen(ServerHandshake handshake) {
        System.out.println("Connected to Server 2");
    }

    @Override
    public void onMessage(String message) {
        System.out.println("Received message from Server 2: " + message);
    }

    @Override
    public void onClose(int code, String reason, boolean remote) {
        System.out.println("Disconnected from Server 2: " + reason);
    }

    @Override
    public void onError(Exception ex) {
        ex.printStackTrace();
        attemptReconnection();
    }

    // Method to send message to Server 1
    public void sendMessageToServer1(String message) {
        send(message);  // Send the message to Server 1
        System.out.println("Sent message to Server 1: " + message);
        attemptReconnection();
    }
    
    private void attemptReconnection() {
        new Thread(() -> {
            while (!isOpen()) {
                try {
                    System.out.println("Attempting to reconnect to Server 1...");
                    // Reconnect logic
                    this.reconnectBlocking(); // Blocking reconnect attempt
                    System.out.println("Reconnected to Server 2");
                } catch (Exception e) {
                    System.out.println("Reconnection failed, retrying in " + RECONNECT_INTERVAL_SECONDS + " seconds...");
                    try {
                        // Wait before the next reconnection attempt
                        TimeUnit.SECONDS.sleep(RECONNECT_INTERVAL_SECONDS);
                    } catch (InterruptedException interruptedException) {
                        interruptedException.printStackTrace();
                    }
                }
            }
      }).start();
    }
}
