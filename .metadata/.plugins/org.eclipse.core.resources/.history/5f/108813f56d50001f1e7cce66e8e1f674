package com.hcmus.admin.category.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.hcmus.admin.category.CategoryService;
import com.hcmus.admin.util.FileUploadUtil;
import com.hcmus.common.entity.Category;
import com.hcmus.common.entity.User;


@Controller
@RequestMapping("/categories")
public class CategoryController {
    @Autowired
    private CategoryService service;
    
    private static Logger LOGGER = LoggerFactory.getLogger(CategoryController.class);
	
	@GetMapping("/page/{pageNum}") 
	public String listByPage(@PathVariable(name = "pageNum") int pageNum, @RequestParam(name = "sortField")  String sortField ,
			String sortDir, @RequestParam("keyword") String keyword	,Model model)
	{
		    if (sortDir ==  null || sortDir.isEmpty()) {
			  sortDir = "asc";
		    }
		  
		    Page<Category> categoryPage = service.listCategoryByPage(pageNum,sortField, sortDir);
		
		    List<Category> listCategory = categoryPage.getContent();
		    long totalElement = categoryPage.getTotalElements();
		    
		    String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";  
		    
		    model.addAttribute("listCategories", listCategory);
			model.addAttribute("sideBarFieldName", "categories");
			model.addAttribute("currentPage", pageNum);
			model.addAttribute("totalPages", categoryPage.getTotalPages());
			model.addAttribute("sortField", sortField);
			model.addAttribute("sortDir", sortDir);
			model.addAttribute("reverseSortDir", reverseSortDir);
		    model.addAttribute("keyword", keyword);
			model.addAttribute("totalElement", totalElement);
			
		    return "categories/categories";
	}
	
	@GetMapping("/new")
	public String newCategory(Model model)
	{
		Category cate = new Category();
		List<Category> categoriesParent = service.listCategoriesUsedInForm();
		
		model.addAttribute("categoriesParent", categoriesParent);
		model.addAttribute("category", cate);
		model.addAttribute("sideBarFieldName", "categories");
		model.addAttribute("title", "New category" );
		return "categories/categories_form";
	}
	
	public String saveCategory(Category cate, @RequestParam("image") MultipartFile multipartFile, RedirectAttributes ra)
	{

		try {
			if (!multipartFile.isEmpty()) {
				String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
				cate.setImage(fileName);
				Category savedCate = service.save(cate);
				
				String uploadDir = "category-images/" + savedUser.getId();
				FileUploadUtil.cleanDir(uploadDir);
			    FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);	
			} else {
				if (user.getPhotos().isEmpty()) user.setPhotos(null);
				
				userService.saveUser(user);
			}
			ra.addAttribute("message", "Create new user successfully!");
		} catch (Exception e) {
			// TODO: handle exception
			ra.addAttribute("message", "Create new user fail");
			LOGGER.error(e.getMessage());
		}
		return "redirect:/categories";
	}
	
	@GetMapping("/**")
	public String listFirstPage(String sortDir, Model model) {
		return listByPage(1, "name", sortDir, "" ,model);
	}
	
	
}
