package com.hcmus.admin.user.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.hcmus.admin.user.UserNotFoundException;
import com.hcmus.admin.user.UserRepository;
import com.hcmus.admin.user.UserService;
import com.hcmus.common.entity.Role;
import com.hcmus.common.entity.User;

@Controller
@RequestMapping("/users")
public class UserController {
   
	private static Logger LOGGER = LoggerFactory.getLogger(UserController.class);
	
	@Autowired
	private UserService userService;
	
	
	@GetMapping("/new")
	public String newUser(Model model)
	{
		List<Role> listRoles = userService.listRole();
		User user  = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("title", "New User");
		return "users/user_form";
	}
	
	@PostMapping("/save")
	public String saveUser(User user, RedirectAttributes redirect)
	{
		try {
			User savedUser = userService.saveUser(user);
			redirect.addAttribute("message", "Create new user successfully!");
		} catch (Exception e) {
			// TODO: handle exception
			redirect.addAttribute("message", "Create new user fail");
			LOGGER.error(e.getMessage());
		}
		return "redirect:/users";
	}

	
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable("id") Integer id, Model model) throws UserNotFoundException
	{
		User user = userService.getUserById(id);
		List<Role> listRoles = userService.listRole();
		
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("title", String.format("Update user ( id : %d )", id));
		
		return "users/user_form";
	}

	@GetMapping("/user/{id}/enabled/{status}")
	public String updateUserEnable(@PathVariable("id") int id, @PathVariable("status") boolean status) throws UserNotFoundException
	{
	
	    userService.updateUserEnable(id, status);
		return "redirect:/users";
	}
	
	@GetMapping("/**")
	public String home(Model model)
	{
		List<User> listUsers = userService.listAll();
		model.addAttribute("listUsers", listUsers);
		model.addAttribute("sideBarFieldName", "user");
		return "users/user";
	}
	
	
}
