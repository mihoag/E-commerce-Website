package com.hcmus.site.customer;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.hcmus.common.entity.AuthenticationType;
import com.hcmus.common.entity.Country;
import com.hcmus.common.entity.Customer;
import com.hcmus.common.exception.CustomerNotFoundException;
import com.hcmus.site.Utility;
import com.hcmus.site.security.oauth.CustomerOAuth2User;
import com.hcmus.site.setting.CountryRepository;
import com.hcmus.site.setting.MailSettingBag;
import com.hcmus.site.setting.SettingService;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import jakarta.transaction.Transactional;
import net.bytebuddy.utility.RandomString;

@Service
@Transactional
public class CustomerService {

	@Autowired
	private CountryRepository countryRepo;
	@Autowired
	private CustomerRepository customerRepo;
	@Autowired
	private SettingService settingService;

	public String checkEmail(String email) {
		Customer customer = customerRepo.findByEmail(email);
		if (customer == null) {
			return "OK";
		}
		return "Duplicated";
	}

	public void registerCustomer(Customer customer) {
		encodePassword(customer);
		customer.setEnabled(false);
		customer.setCreatedTime(new Date());
		customer.setAuthenticationType(AuthenticationType.DATABASE);

		String randomCode = RandomString.make(64);
		customer.setVerificationCode(randomCode);

		customerRepo.save(customer);

	}

	private void encodePassword(Customer customer) {
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String encodedPassword = passwordEncoder.encode(customer.getPassword());
		customer.setPassword(encodedPassword);
	}

	public boolean checkVerification(String code) {
		Customer customer = customerRepo.findByVerificationCode(code);

		if (customer == null || customer.isEnabled()) {
			return false;
		}

		customerRepo.enable(customer.getId());
		return true;
	}

	public void updateAuthenticationType(Customer customer, AuthenticationType authenticationType) {
		customer.setAuthenticationType(authenticationType);
		customerRepo.save(customer);
	}

	public void addNewCustomerUponOAuthLogin(String name, String email, String countryCode, String imageUrl,
			AuthenticationType authenticationType) {
		Customer customer = new Customer();
		customer.setEmail(email);
		setName(name, customer);

		customer.setEnabled(true);
		customer.setCreatedTime(new Date());
		customer.setAuthenticationType(authenticationType);
		customer.setPassword("");
		customer.setAddressLine1("");
		customer.setCity("");
		customer.setState("");
		customer.setPhoneNumber("");
		customer.setPostalCode("");
		customer.setCountry(countryRepo.findByCode(countryCode));
		customer.setImageUrl(imageUrl);
		
		customerRepo.save(customer);
	}

	private void setName(String name, Customer customer) {
		String[] nameArray = name.split(" ");
		if (nameArray.length < 2) {
			customer.setFirstName(name);
			customer.setLastName("");
		} else {
			String firstName = nameArray[0];
			customer.setFirstName(firstName);

			String lastName = name.replaceFirst(firstName + " ", "");
			customer.setLastName(lastName);
		}
	}

	public Customer getCustomerByEmail(String email) {
		return customerRepo.findByEmail(email);
	}

	public Customer getCustomerById(Integer id) {
		return customerRepo.findById(id).get();
	}

	public List<Country> listAllCountries() {
		return countryRepo.findAll();
	}

	public void updateCustomer(Customer customerInForm) {
		BCryptPasswordEncoder bpc = new BCryptPasswordEncoder();
		Customer customerInDb = customerRepo.findById(customerInForm.getId()).get();
		if (customerInDb.getAuthenticationType().equals(AuthenticationType.DATABASE)) {
			if (!customerInForm.getPassword().isEmpty()) {
				String encodedPassword = bpc.encode(customerInForm.getPassword());
				customerInForm.setPassword(encodedPassword);
			} else {
				customerInForm.setPassword(customerInDb.getPassword());
			}
		} else {
			customerInForm.setPassword(customerInDb.getPassword());
		}

		customerInForm.setEnabled(customerInDb.isEnabled());
		customerInForm.setCreatedTime(customerInDb.getCreatedTime());
		customerInForm.setVerificationCode(customerInDb.getVerificationCode());
		customerInForm.setAuthenticationType(customerInDb.getAuthenticationType());
		customerInForm.setResetPasswordToken(customerInDb.getResetPasswordToken());

		customerRepo.save(customerInForm);
	}

	public String updatePasswordToken(String email) throws CustomerNotFoundException {
		Customer customer = customerRepo.findByEmail(email);

		if (customer == null) {
			throw new CustomerNotFoundException("Customer not found with email " + email);
		}

		String token = RandomString.make(30);
		customer.setResetPasswordToken(token);
		customerRepo.save(customer);

		return token;
	}
	
	

	public Customer getCustomerByToken(String token) throws CustomerNotFoundException {
		Customer customer = customerRepo.findByResetPasswordToken(token);
		if (customer == null) {
			throw new CustomerNotFoundException("Customer not found with token " + token);
		}

		return customer;
	}

	public void updatePassword(String token, String newPassword) throws CustomerNotFoundException {
		Customer customer = customerRepo.findByResetPasswordToken(token);
		if (customer == null) {
			throw new CustomerNotFoundException("No customer found: invalid token");
		}

		customer.setPassword(newPassword);
		customer.setResetPasswordToken(null);
		encodePassword(customer);

		customerRepo.save(customer);
	}

	public void generateOneTimePassword(Customer customer) {
		PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

		String OTP = RandomString.make(8);
		String encodedOTP = passwordEncoder.encode(OTP);

		customerRepo.save(customer);

		sendOTPEmail(customer, OTP);
	}
	

	public void sendOTPEmail(Customer customer, String OTP) {
		MailSettingBag emailSettings = settingService.getMailSettings();
		JavaMailSenderImpl mailSender = Utility.prepareMailSender(emailSettings);

		String toAddress = customer.getEmail();
		String content = "<p>Hello " + customer.getFirstName() + "</p>"
				+ "<p>For security reason, you're required to use the following " + "One Time Password to login:</p>"
				+ "<p><b>" + OTP + "</b></p>" + "<br>" + "<p>Note: this OTP is set to expire in 5 minutes.</p>";

		MimeMessage message = mailSender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);

		try {
			helper.setFrom(emailSettings.getFromAddress(), emailSettings.getSenderName());
			helper.setTo(toAddress);
			helper.setSubject("SEND OTP");
			helper.setText(content, true);
			mailSender.send(message);
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
