package com.hcmus.admin.user.controller;

import java.io.IOException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.hcmus.admin.user.UserNotFoundException;
import com.hcmus.admin.user.UserRepository;
import com.hcmus.admin.user.UserService;
import com.hcmus.admin.user.export.UserCsvExporter;
import com.hcmus.admin.user.export.UserExcelExporter;
import com.hcmus.admin.user.export.UserPdfExporter;
import com.hcmus.admin.util.FileUploadUtil;
import com.hcmus.common.entity.Role;
import com.hcmus.common.entity.User;

import jakarta.servlet.http.HttpServletResponse;

@Controller
@RequestMapping("/users")
public class UserController {
   
	private static Logger LOGGER = LoggerFactory.getLogger(UserController.class);
	
	@Autowired
	private UserService userService;
	
	
	@GetMapping("/new")
	public String newUser(Model model)
	{
		List<Role> listRoles = userService.listRole();
		User user  = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("title", "New User");
		return "users/user_form";
	}
	
	@PostMapping("/save")
	public String saveUser(User user, RedirectAttributes redirect, @RequestParam("image") MultipartFile multipartFile)
	{
		try {
			if (!multipartFile.isEmpty()) {
				String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
				user.setPhotos(fileName);
				User savedUser = userService.saveUser(user);
				
				String uploadDir = "user-photos/" + savedUser.getId();
			    FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);	
			} else {
				if (user.getPhotos().isEmpty()) user.setPhotos(null);
				userService.saveUser(user);
			}
			redirect.addAttribute("message", "Create new user successfully!");
		} catch (Exception e) {
			// TODO: handle exception
			redirect.addAttribute("message", "Create new user fail");
			LOGGER.error(e.getMessage());
		}
		return "redirect:/users";
	}

	
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable("id") Integer id, Model model, RedirectAttributes redirectAttributes) 
	{
		try {
			User user = userService.getUserById(id);
			List<Role> listRoles = userService.listRole();
			
			model.addAttribute("user", user);
			model.addAttribute("listRoles", listRoles);
			model.addAttribute("title", String.format("Update user ( id : %d )", id));
			
			return "users/user_form";
		} catch (UserNotFoundException e) {
			redirectAttributes.addAttribute("message", e.getMessage());
			return "redirect:/users";
			// TODO: handle exception
		}
	}

	@GetMapping("/user/{id}/enabled/{status}")
	public String updateUserEnable(@PathVariable("id") int id, @PathVariable("status") boolean status) throws UserNotFoundException
	{
	    userService.updateUserEnable(id, status);
		return "redirect:/users";
	}
	
	@GetMapping("/export/csv")
	public void exportToCSV(HttpServletResponse response) throws IOException {
		List<User> listUsers = userService.listAll();
		UserCsvExporter exporter = new UserCsvExporter();
		exporter.export(listUsers, response);
	}

	@GetMapping("/export/pdf")
	public void exportToPDF(HttpServletResponse response) throws IOException {
		List<User> listUsers = userService.listAll();
		UserPdfExporter exporter = new UserPdfExporter();
		exporter.export(listUsers, response);
	}
	
	@GetMapping("/export/excel")
	public void exportToEXCEL(HttpServletResponse response) throws IOException {
		List<User> listUsers = userService.listAll();
		UserExcelExporter exporter = new UserExcelExporter();
		exporter.export(listUsers, response);
	}
	
	
	@GetMapping("/page/{pageNum}")
	public String listByPage(@PathVariable("pageNum") int pageNum, Model model)
	{
		model.addAttribute("sideBarFieldName", "user");
	}

	@GetMapping("/**")
	public String home()
	{
		List<User> listUsers = userService.listAll();
		model.addAttribute("listUsers", listUsers);
		
		return "users/user";
	}
}
