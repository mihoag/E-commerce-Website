package com.hcmus.admin.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.hcmus.common.entity.Role;
import com.hcmus.common.entity.User;


@Service
public class UserService {
    @Autowired
    private UserRepository userRepo;
     
    @Autowired
    private RoleRepository roleRepo; 
    public List<User> listAll()
    {
    	return userRepo.findAll();
    }
    
    public List<Role> listRole()
    {
    	return roleRepo.findAll();
    }
    
    public User saveUser(User user)
    {
    	boolean isUpdatingMode = (user.getId() != null);
    	if(isUpdatingMode)
    	{
    		if(!user.getPassword().isEmpty())
    		{
    			Integer id = user.getId();
        		User userInDb = getUserById(id);
        		user.setPassword(userInDb.getPassword());
    		}
    		else
    		{
    		   encodePassword(user);	
    		}
    	}
    	else
    	{
    		encodePassword(user);
    	}
    	return userRepo.save(user);
    }
    
    public void encodePassword(User user)
    {
    	String rawPassword = user.getPassword();
    	PasswordEncoder bcrypt = new BCryptPasswordEncoder();
    	String encodedPassword = bcrypt.encode(rawPassword);
    	user.setPassword(encodedPassword);
    }
    
    public User getUserById(int id) throws UserNotFoundException
    {
    	 try {
			
		} catch (Exception e) {
			// TODO: handle exception
			throw new UserNotFoundException("User not found with id " + id);
		}
         return userRepo.findById(id).get();
    }
    
    public void deleteUserById(int id)
    {
    	userRepo.deleteById(id);
    }
    
    public boolean checkUniqueEmail(Integer id, String email)
    {
    	User user = userRepo.getUserByEmail(email);
    	if(user == null)
    	{
    		return true;
    	}
    	
    	boolean isCreatingMode = (id == null);
    	
    	if(isCreatingMode)
    	{
    		return false;
    	}
    	else
    	{
    		if(user.getId() != id)
    		{
    			return false;
    		}
    	}
    	
    	return true;
    }
}
