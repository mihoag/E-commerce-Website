package com.hcmus.admin.category;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.hcmus.admin.user.UserNotFoundException;
import com.hcmus.admin.user.UserService;
import com.hcmus.common.entity.Category;
import com.hcmus.common.entity.User;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class CategoryService {
	
   private static final Integer PAGE_SIZE = 6; 	
   
   @Autowired
   private CategoryRepository repo;
   
   public Page<Category> listUserByPage(Integer pageNum, String sortField,String sortDir)
   {
    Sort sort = Sort.by(sortField);
    if(sortDir.equals("asc"))
    {
    	sort = sort.ascending();
    }
    else if(sortDir.equals("desc"))
    {
    	sort = sort.descending();
    }
    
    
   	Pageable pageable = PageRequest.of(pageNum-1, CategoryService.PAGE_SIZE, sort);
   	Page<Category> pageCategory = repo.findAll(pageable);
   	
   	return pageCategory;
   }
   
   public Category getCateById(int id) throws CategoryNotFoundException 
   {
   	Category category;
   	 try {
   		category = repo.findById(id).get();
		} catch (Exception e) {
			// TODO: handle exception
			throw new CategoryNotFoundException("Category not found with id " + id);
		}
        return category;
   }
   
   public void deleteCById(int id) throws CategoryNotFoundException 
   {
   	    try {
   		   repo.deleteById(id);
		} catch (Exception e) {
		   throw new CategoryNotFoundException("Category not found with id " + id);
		}
   }
   
   public void updateCategoryEnable(Integer id, boolean enable)
   {	
   	 try {
	    repo.updateEnabledStatus(id, enable);
	 } catch (Exception e) {
	    e.printStackTrace();
     }
   }
   
   public boolean checkUniqueName(Integer id, String name)
   {
   	 Category cate = repo.findByName(name);
   	 if(cate == null)
   	 {
   		return true;
     }
   	
   	 boolean isCreatingMode = (id == null);
   	
   	 if(isCreatingMode)
   	 {
   		return false;
   	 }
   	 else
   	 {
   		if(cate.getId() != id)
   		{
   			return false;
   		}
   	 }
   	 return true;
   }
   
   public boolean checkUniqueAlias(Integer id, String alias)
   {
   	 Category cate = repo.findByAlias(alias);
   	 if(cate == null)
   	 {
   		return true;
     }
   	
   	 boolean isCreatingMode = (id == null);
   	
   	 if(isCreatingMode)
   	 {
   		return false;
   	 }
   	 else
   	 {
   		if(cate.getId() != id)
   		{
   			return false;
   		}
   	 }
   	 return true;
   } 
   
   public List<Category> listCategoriesUsedInForm()
   {
	   List<Category> categoryUsedInForm = new ArrayList<>();
	   
	   List<Category> categoryInDb = repo.findRootCategories(Sort.by("name").ascending());
	   
	   for(Category cate  : categoryInDb)
	   {
		   categoryUsedInForm.add(cate);
		   Set<Category> childCategories = cate.getChildren();
		   Set<Category> sortCategories = sortCategory(childCategories);
	   }
	   
	   return categoryUsedInForm;
   }
   
   public SortedSet<Category> sortCategory(Set<Category> categories)
   {
	    
   }
   
   public SortedSet<Category> sortCategory(String sort,Set<Category> categories)
}
