package com.hcmus.admin.socket;

import java.net.URI;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.google.gson.Gson;
import com.hcmus.common.entity.chat.MessageDTO;
import com.hcmus.common.entity.chat.RoleChat;
import com.hcmus.common.entity.chat.message;



public class ServerHandler extends TextWebSocketHandler {
	    private static Set<WebSocketSession> sessions = Collections.newSetFromMap(new ConcurrentHashMap<>());    
	    private ServerClient serverClient;
	
		 public ServerHandler() {
		        // Initialize the client connection to Server 2
		        try {
		            URI uri = new URI("ws://localhost:8081/Myshop/server1/websocket"); // Change to your Server 2 URL
		            serverClient = new ServerClient(uri);
		            serverClient.connect();
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }
		 
		 

	    @Override
	    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
	        sessions.add(session);
	        System.out.println("Client connected: " + session.getId());
	    }

	    @Override
	    public void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
	       
	    	 // Create Gson instance
	        Gson gson = new Gson();
	    	MessageDTO dto = gson.fromJson(message.getPayload(), MessageDTO.class);
	    	
	    	// receive from interface UI client 2
	    	if(dto.getRole_chat() == RoleChat.ADMIN)
	    	{
	    		
	    	}
	    	// receive from server1
	    	else if(dto.getRole_chat() == RoleChat.CUSTOMER)
	    	{
		        // Broadcast the message to all connected HTML clients
		        broadcastToClients(message.getPayload());	
	    	}
	    }
	    
	    @Override
	    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
	    // TODO Auto-generated method stub
	    	sessions.remove(session); 
	    }

	    private void broadcastToClients(String message) throws Exception {
	        for (WebSocketSession session : sessions) {
	            if (session.isOpen()) {
	                session.sendMessage(new TextMessage(message));
	            }
	        }
	    }
}
